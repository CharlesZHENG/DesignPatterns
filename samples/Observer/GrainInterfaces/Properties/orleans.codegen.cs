//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace ObserverInterfaces
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using Orleans;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class DoStuffFactory
    {
        

                        public static IDoStuff GetGrain(long primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IDoStuff), 1237371746, primaryKey));
                        }

                        public static IDoStuff GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IDoStuff), 1237371746, primaryKey, grainClassNamePrefix));
                        }

                        public static IDoStuff GetGrain(Guid primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IDoStuff), 1237371746, primaryKey));
                        }

                        public static IDoStuff GetGrain(Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IDoStuff), 1237371746, primaryKey, grainClassNamePrefix));
                        }

            public static IDoStuff Cast(IAddressable grainRef)
            {
                
                return DoStuffReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.GrainReferenceAttribute("ObserverInterfaces.IDoStuff")]
        internal class DoStuffReference : Orleans.GrainReference, IDoStuff, Orleans.IAddressable
        {
            

            public static IDoStuff Cast(IAddressable grainRef)
            {
                
                return (IDoStuff) GrainReference.CastInternal(typeof(IDoStuff), (GrainReference gr) => { return new DoStuffReference(gr);}, grainRef, 1237371746);
            }

                protected override int InterfaceId { get { return 1237371746; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "ObserverInterfaces.IDoStuff"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return DoStuffMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal DoStuffReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                DoStuffReference input = ((DoStuffReference)(original));
                return ((DoStuffReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                DoStuffReference input = ((DoStuffReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return DoStuffReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public System.Threading.Tasks.Task SubscribeForUpdates(ObserverInterfaces.IObserve subscriber)
            {
GrainFactoryBase.CheckGrainObserverParamInternal(subscriber);

                return base.InvokeMethodAsync<object>(989382207, new object[] {subscriber is GrainBase ? ObserverInterfaces.ObserveFactory.Cast(subscriber.AsReference()) : subscriber}, TimeSpan.Zero );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [Orleans.MethodInvokerAttribute("ObserverInterfaces.IDoStuff", 1237371746)]
    internal class DoStuffMethodInvoker : IGrainMethodInvoker
    {
        
        public int InterfaceId
        {
            get
            {
                return 1237371746;
            }
        }
        
        public async System.Threading.Tasks.Task<Object> Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {
                if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1237371746:  // IDoStuff
                        switch (methodId)
                        {
                            case 989382207: 
                                await ((IDoStuff)grain).SubscribeForUpdates((IObserve)arguments[0]);
                              return true;
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1237371746:  // IDoStuff
                    switch (methodId)
                    {
                        case 989382207:
                            return "SubscribeForUpdates";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class DoStuffProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ObserveFactory
    {
        

            public static IObserve Cast(IAddressable grainRef)
            {
                
                return ObserveReference.Cast(grainRef);
            }

        private static IGrainMethodInvoker methodInvoker;

        public async static System.Threading.Tasks.Task<IObserve> CreateObjectReference(IObserve obj)
        {
            if (methodInvoker == null) methodInvoker = new ObserveMethodInvoker();
            return ObserveFactory.Cast(await GrainReference.CreateObjectReference(obj, methodInvoker));
        }

        public static void DeleteObjectReference(IObserve reference)
        {
            GrainReference.DeleteObjectReference(reference);
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.GrainReferenceAttribute("ObserverInterfaces.IObserve")]
        internal class ObserveReference : Orleans.GrainReference, IObserve, Orleans.IAddressable
        {
            

            public static IObserve Cast(IAddressable grainRef)
            {
                
                return (IObserve) GrainReference.CastInternal(typeof(IObserve), (GrainReference gr) => { return new ObserveReference(gr);}, grainRef, -1853968243);
            }

                protected override int InterfaceId { get { return -1853968243; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "ObserverInterfaces.IObserve"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return ObserveMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal ObserveReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                ObserveReference input = ((ObserveReference)(original));
                return ((ObserveReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                ObserveReference input = ((ObserveReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return ObserveReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public void StuffUpdate(int data)
            {

                base.InvokeOneWayMethod(570614880, new object[] {data} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [Orleans.MethodInvokerAttribute("ObserverInterfaces.IObserve", -1853968243)]
    internal class ObserveMethodInvoker : IGrainMethodInvoker
    {
        
        public int InterfaceId
        {
            get
            {
                return -1853968243;
            }
        }
        
        public async System.Threading.Tasks.Task<Object> Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {
                if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -1853968243:  // IObserve
                        switch (methodId)
                        {
                            case 570614880: 
                                ((IObserve)grain).StuffUpdate((Int32)arguments[0]); return true;
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -1853968243:  // IObserve
                    switch (methodId)
                    {
                        case 570614880:
                            return "StuffUpdate";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ObserveProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
